name: "Migrate Variables & Secrets with Values"

on:
  workflow_dispatch:
    inputs:
      source_org:
        description: 'Source organization'
        required: true
      source_repo:
        description: 'Source repository (leave empty to migrate all)'
        required: false
      target_org:
        description: 'Target organization'
        required: true
      target_repo:
        description: 'Target repository'
        required: true
      scope:
        description: >-
          Comma-separated scopes:
          actionsenvironments,
          actionsreposecrets,
          actionsrepovariables,
          dependabotreposecrets,
          codespacesreposecrets,
          actionsenvsecrets,
          actionsenvvariables,
          actionsorgsecrets,
          actionsorgvariables,
          dependabotorgsecrets,
          codespacesorgsecrets
        required: true
      force:
        description: 'Overwrite existing values?'
        required: false
        default: 'false'

jobs:
  migrate:
    runs-on: [self-hosted, Windows, X64]
    steps:
      - uses: actions/checkout@v3

      - name: Install GitHub CLI if not present
        shell: powershell
        run: |
          try {
            $ghVersion = gh --version
            Write-Host "GitHub CLI is already installed: $ghVersion"
          }
          catch {
            Write-Host "GitHub CLI is not installed. Installing now..."
            
            # Create a temporary directory for the installer
            $tempDir = Join-Path $env:TEMP "gh-cli-install"
            New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
            
            # Download GitHub CLI
            $installerPath = Join-Path $tempDir "gh-cli-installer.msi"
            $downloadUrl = "https://github.com/cli/cli/releases/download/v2.41.0/gh_2.41.0_windows_amd64.msi"
            
            Write-Host "Downloading GitHub CLI from $downloadUrl"
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
            
            # Install GitHub CLI
            Write-Host "Installing GitHub CLI..."
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", $installerPath, "/quiet", "/norestart" -Wait
            
            # Verify installation
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
            try {
              $ghVersion = gh --version
              Write-Host "GitHub CLI installation successful: $ghVersion"
            }
            catch {
              Write-Error "GitHub CLI installation failed. Please check permissions or install manually from https://cli.github.com/"
              exit 1
            }
          }

      - name: Run Migration Script
        shell: powershell
        env:
          SOURCE_PAT: ${{ secrets.SOURCE_PAT }}
          TARGET_PAT: ${{ secrets.TARGET_PAT }}
        run: |
          # Create a unique temp directory for this run
          $tempSecretsDir = Join-Path $env:TEMP "GHSecretsMigration_$([DateTime]::Now.ToString('yyyyMMddHHmmss'))"
          Write-Host "Using temporary directory: $tempSecretsDir"
          
          # Debug info
          Write-Host "Current directory: $PWD"
          Write-Host "GitHub workspace: ${{ github.workspace }}"
          
          # Path to script
          $scriptPath = "${{ github.workspace }}/migration/Migrate-GitHubVariables.ps1"
          
          # Execute with conditional Force parameter
          if ("${{ github.event.inputs.force }}" -eq "true") {
            & $scriptPath `
              -SourceOrg "${{ github.event.inputs.source_org }}" `
              -SourceRepo "${{ github.event.inputs.source_repo }}" `
              -TargetOrg "${{ github.event.inputs.target_org }}" `
              -TargetRepo "${{ github.event.inputs.target_repo }}" `
              -SourcePAT $env:SOURCE_PAT `
              -TargetPAT $env:TARGET_PAT `
              -Scope "${{ github.event.inputs.scope }}" `
              -TempSecretDir $tempSecretsDir `
              -Force
          } else {
            & $scriptPath `
              -SourceOrg "${{ github.event.inputs.source_org }}" `
              -SourceRepo "${{ github.event.inputs.source_repo }}" `
              -TargetOrg "${{ github.event.inputs.target_org }}" `
              -TargetRepo "${{ github.event.inputs.target_repo }}" `
              -SourcePAT $env:SOURCE_PAT `
              -TargetPAT $env:TARGET_PAT `
              -Scope "${{ github.event.inputs.scope }}" `
              -TempSecretDir $tempSecretsDir
          }
